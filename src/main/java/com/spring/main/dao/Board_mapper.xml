<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.spring.main.dao.BoardDAO">
	<!--글상세보기 -->
	<select id="Boarddetail" resultType="board">
		SELECT
		BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL,CNTRECO
		FROM BOARD WHERE BOARDIDX=#{boardIdx}
	</select>
	<!-- 게시판 목록 전체 개수 조회 -->
	<select id="getBoardListCount" resultType="int">
		SELECT
  		  COUNT(BOARDIDX) AS CNT
		FROM BOARD
		WHERE BRDCTGIDX = #{param1} and blind='n'
   	    <if test="!param3.equals('')">
		   <choose>
		     <when test="param2.equals('subject')">
		       AND subject LIKE '%'||#{param3}||'%'
		     </when>
		     <when test="param2.equals('content')">
  		       AND content LIKE '%'||#{param3}||'%'
		     </when>
		     <when test="param2.equals('id')">
  		       AND id LIKE '%'||#{param3}||'%'
		     </when>
		     <otherwise>
		       AND (subject LIKE '%'||#{param3}||'%' OR content LIKE '%'||#{param3}||'%' OR id LIKE '%'||#{param3}||'%' )
		     </otherwise>
		   </choose>
        </if>
	
	</select>

	<!-- 글 목록 최신순으로 불러오기 -->
	<select id="getBoardList" resultType="board">
		SELECT
		  BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL
		FROM (
		  SELECT ROW_NUMBER() OVER (ORDER BY REG_DATE DESC) AS RNUM,
		    BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL
		  FROM BOARD
		  WHERE BRDCTGIDX = #{param3} and blind='n'
		  <if test="!param5.equals('')">
			 <choose>
			   <when test="param4.equals('subject')">
			     AND subject LIKE '%'||#{param5}||'%'
			   </when>
			   <when test="param4.equals('content')">
			     AND content LIKE '%'||#{param5}||'%'
			   </when>
			   <when test="param4.equals('id')">
			     AND id LIKE '%'||#{param5}||'%'
			   </when>
			   <otherwise>
			     AND (subject LIKE '%'||#{param5}||'%' OR content LIKE '%'||#{param5}||'%' OR id LIKE '%'||#{param5}||'%' )
			   </otherwise>
			 </choose>
	      </if>
		)
		WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>
	<!-- 우리집 자랑 목록 추천순으로 불러오기 -->
	<select id="cntboardList"
		resultType="com.spring.main.dto.BoardDTO">
		SELECT
		BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,BHIT,BRDCTGIDX,FORMIDX,CNTRECO
		FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY CNTRECO DESC) AS RNUM,
		BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL,CNTRECO
		FROM BOARD
		WHERE BRDCTGIDX = #{param3} and blind='n'
		)
		WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>

	<select id="getTipmain" resultType="com.spring.main.dto.BoardDTO">
		SELECT
		  BOARDIDX, SUBJECT, CONTENT, ID, REG_DATE, ROOMSIZE, BUDGET, KEYITEMS, BHIT, BLIND, BRDCTGIDX, FORMIDX, EMAIL, CNTRECO
		FROM (
		  SELECT CNTRECO, ROW_NUMBER() OVER (ORDER BY 
		  <choose>
		    <when test="param3.equals('recent')">
			  REG_DATE
		    </when>
		    <otherwise>
		      CNTRECO
		    </otherwise>
		  </choose>
		   DESC) AS RNUM,
		    BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL
		  FROM BOARD
		  WHERE BRDCTGIDX = 3 and blind='n' 
		  <if test="!param5.equals('')">
			 <choose>
			   <when test="param4.equals('subject')">
			     AND subject LIKE '%'||#{param5}||'%'
			   </when>
			   <when test="param4.equals('content')">
			     AND content LIKE '%'||#{param5}||'%'
			   </when>
			   <when test="param4.equals('id')">
			     AND id LIKE '%'||#{param5}||'%'
			   </when>
			   <otherwise>
			     AND (subject LIKE '%'||#{param5}||'%' OR content LIKE '%'||#{param5}||'%' OR id LIKE '%'||#{param5}||'%' )
			   </otherwise>
			 </choose>
	      </if>
		  
		)
		WHERE RNUM BETWEEN #{param1} AND #{param2}
		
	</select>

	<!-- 도와줘요게시판 목록 전체 개수 조회 -->
	<select id="getHelpmainCount" resultType="int">
		SELECT COUNT(BOARDIDX) AS CNT FROM (
		  SELECT board.BOARDIDX, COUNT(comments.COMMIDX) AS CNT
		  FROM BOARD board
			LEFT JOIN COMMENTS comments ON comments.BOARDIDX = board.BOARDIDX
		  WHERE BRDCTGIDX = #{param1} and board.blind='n'
		  <if test="!param3.equals('')">
		    <choose>
		      <when test="param2.equals('subject')">
		        AND subject LIKE '%'||#{param3}||'%'
		      </when>
		      <when test="param2.equals('content')">
  		        AND content LIKE '%'||#{param3}||'%'
		      </when>
		      <when test="param2.equals('id')">
  		        AND id LIKE '%'||#{param3}||'%'
		      </when>
		      <otherwise>
		        AND (subject LIKE '%'||#{param3}||'%' OR content LIKE '%'||#{param3}||'%' OR id LIKE '%'||#{param3}||'%' )
		      </otherwise>
		    </choose>
          </if>
		  
		  <if test="param4.equals('T')">
		    AND COMMIDX IS NULL
		  </if>
	      GROUP BY board.BOARDIDX
	    )
	</select>
	<!-- 도와줘요 게시판 목록 조회 -->
	<select id="getHelpmainList" resultType="com.spring.main.dto.BoardDTO">
	  SELECT BOARDIDX, SUBJECT, CONTENT, ID, REG_DATE, ROOMSIZE, BUDGET, KEYITEMS, BHIT, BLIND, BRDCTGIDX, FORMIDX, EMAIL, COMMENTS_CNT
	  FROM (
		  SELECT ROW_NUMBER() OVER (ORDER BY 
		  <choose>
		    <when test="param6.equals('recent')">
			  REG_DATE
		    </when>
		    <otherwise>
		      COMMENTS_CNT
		    </otherwise>
		  </choose>
		   DESC) AS RNUM,
		    BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL, COMMENTS_CNT
		  FROM (
		    SELECT board.BOARDIDX, SUBJECT, CONTENT, board.ID, board.REG_DATE, ROOMSIZE, BUDGET, KEYITEMS, BHIT, board.BLIND, BRDCTGIDX, FORMIDX, EMAIL, COMMENTS_CNT
		    FROM BOARD board
		      LEFT JOIN (
			    SELECT board.BOARDIDX, COUNT(comments.COMMIDX) AS COMMENTS_CNT
			    FROM BOARD board
			      LEFT JOIN COMMENTS comments ON comments.BOARDIDX = board.BOARDIDX
			    GROUP BY board.BOARDIDX
		    ) v ON v.boardidx = board.boardidx
		  )
		  WHERE BRDCTGIDX = #{param3} and blind='n' 
		  	<if test="param7.equals('T')">
		      AND COMMENTS_CNT = 0
		  	</if>
		    <if test="!param5.equals('')">
			    <choose>
			      <when test="param4.equals('subject')">
			        AND subject LIKE '%'||#{param5}||'%'
			      </when>
			      <when test="param4.equals('content')">
	  		        AND content LIKE '%'||#{param5}||'%'
			      </when>
			      <when test="param4.equals('id')">
	  		        AND id LIKE '%'||#{param5}||'%'
			      </when>
			      <otherwise>
			        AND (subject LIKE '%'||#{param5}||'%' OR content LIKE '%'||#{param5}||'%' OR id LIKE '%'||#{param5}||'%' )
			      </otherwise>
			    </choose>
	          </if>
	         
		)
		
		WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>


	<!-- 세부검색 -->
	<select id="BoardSearchList"
		resultType="com.spring.main.dto.BoardDTO">


		SELECT BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,BHIT
		FROM (SELECT
		ROW_NUMBER() OVER (ORDER BY REG_DATE DESC) AS RNUM,
		BOARDIDX,SUBJECT,CONTENT,ID,REG_DATE,ROOMSIZE,BUDGET,KEYITEMS,BHIT,BLIND,BRDCTGIDX,FORMIDX,EMAIL
		FROM BOARD

		<if test="param3.equals('all') and !param4.equals('')"> AND subject LIKE '%'||#{param4}||'%' OR content LIKE
			'%'||#{param4}||'%' </if>
		<if test="param3.equals('subject') and !param4.equals('')"> AND subject LIKE '%'||#{param4}||'%' </if>
		<if test="param3.equals('content') and !param4.equals('')">AND content LIKE '%'||#{param4}||'%' </if>
		<if test="param3.equals('id') and !param4.equals('')">AND id LIKE '%'||#{param4}||'%' </if>
		)

		WHERE RNUM BETWEEN #{param1} AND #{param2}

	</select>
	<!-- 우리집 자랑 전체 목록 조회 -->
	<select id="gethomeMainCount" resultType="int">
	 SELECT COUNT(boardidx) FROM board WHERE brdctgidx = #{param1}
	 	<if test="param2 == '' and param4 == 0 and param5 == 0 and param6 == 0">
	 		AND blind = 'n'
	 	</if>
	 	<if test="param2 != ''">
	 		AND content like #{param2} AND blind = 'n'
	 	</if>
	 	<if test="param4 != 0">
			AND formidx = #{param3}	AND blind = 'n'
	 	</if>
	 	<if test="param5 != 0">
			AND budget = #{param4} AND blind = 'n'
	 	</if>
	 	<if test="param6 != 0">
			AND roomsize like #{param6} AND blind = 'n'
	 	</if>
	</select>
	
	<!-- 우리집 자랑 세부검색 -->
	<select id="gethomeMainList" resultType="com.spring.main.dto.BoardDTO">
		SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY ${param4} DESC) AS rnum, b.boardidx, b.subject, b.id, b.reg_date, b.brdctgidx, b.keyitems, b.budget, b.roomsize, b.blind, b.formidx, b.bhit, b.cntreco, p.newfilename FROM (
		(SELECT photoidx, newfilename, boardidx FROM (SELECT photoidx, newfilename, boardidx FROM photos) where ROWID IN (SELECT MAX(ROWID) FROM photos GROUP BY boardidx)) p 
		), board b WHERE p.boardidx = b.boardIdx AND brdctgidx = 2)
		<where>
			<if test="param3 == '' and param5 == 0 and param6 == 0 and param7 == 0">rnum BETWEEN #{param1} AND #{param2}</if>
			<if test="param3 != ''">keyword like #{param3} AND rnum BETWEEN #{param1} AND #{param2}</if>
			<if test="param5 != 0">formidx = #{param5} AND rnum BETWEEN #{param1} AND #{param2}</if>
			<if test="param6 != 0">budget <![CDATA[<]]> #{param6} AND rnum BETWEEN #{param1} AND #{param2}</if>		
			<if test="param7 != 0">roomsize = #{param7}  AND rnum BETWEEN #{param1} AND #{param2}</if>
		</where>
	</select>
<!-- 		(startNum, endNum, keyword, orderBy, formcategory, budget, roomsize) -->


	<!--게시판카테고리 -->
	<select id="boardCtg" resultType="String">
		SELECT category FROM boardCtg
		WHERE brdCtgIdx=#{boardCtgIdx}
	</select>

	<!--주거형태카테고리 -->
	<select id="formCtg" resultType="String">
		SELECT CATEGORY FROM FORM WHERE
		formIdx=#{formIdx}
	</select>
	<!-- 조회수 증가 -->
	<update id="boardUpHit">
		UPDATE board SET bHit=bHit+1 WHERE
		boardIdx=#{boardIdx}
	</update>
	<!--글작성하기 -->
	<insert id="boardWrite" useGeneratedKeys="true"
		keyProperty="boardIdx" keyColumn="boardIdx" parameterType="board">
		<if test="brdctgidx==1">
			INSERT INTO board(BOARDIDX, SUBJECT, CONTENT, ID,BRDCTGIDX)
			VALUES
			(board_seq.NEXTVAL, #{subject}, #{content}, #{id},#{brdctgidx})
		</if>
		<if test="brdctgidx==2">
			INSERT INTO board(BOARDIDX, SUBJECT, CONTENT,
			ID,BRDCTGIDX,FORMIDX,ROOMSIZE,BUDGET,KEYITEMS)
			VALUES
			(board_seq.NEXTVAL, #{subject}, #{content},
			#{id},#{brdctgidx},#{formIdx},#{roomSize},#{budget},#{keyItems})
		</if>
		<if test="brdctgidx==3">
			INSERT INTO board(BOARDIDX, SUBJECT, CONTENT, ID,BRDCTGIDX)
			VALUES
			(board_seq.NEXTVAL, #{subject}, #{content}, #{id},#{brdctgidx})
		</if>
		<if test="brdctgidx==4">
			INSERT INTO board(BOARDIDX, SUBJECT, CONTENT, ID,BRDCTGIDX)
			VALUES
			(board_seq.NEXTVAL, #{subject}, #{content}, #{id},#{brdctgidx})
		</if>
		<if test="brdctgidx==5">
			INSERT INTO board(BOARDIDX, SUBJECT, CONTENT, ID,BRDCTGIDX,EMAIL, SGTCTG)
			VALUES
			(board_seq.NEXTVAL, #{subject}, #{content}, #{id},#{brdctgidx}, #{email}, #{sgtctg})
		</if>

	</insert>
	<!--글작성파일추가 -->
	<insert id="boardWriteFile">
		INSERT INTO photos (PHOTOIDX, NEWFILENAME,
		ORIFILENAME, BOARDIDX)
		VALUES (photos_seq.NEXTVAL, #{param1}, #{param2}, #{param3})
	</insert>
	<!--글수정하기 -->
	<update id="boardUpdate" parameterType="board">
		<if test="brdctgidx==1">
			UPDATE board SET SUBJECT=#{subject},
			CONTENT=#{content},BrdCtgIDX=#{brdctgidx}
			WHERE boardIdx=#{boardIdx}
		</if>
		<if test="brdctgidx==2">
			UPDATE board SET SUBJECT=#{subject},
			CONTENT=#{content},BrdCtgIDX=#{brdctgidx},roomSize=#{roomSize},budget=#{budget},formIdx=#{formIdx}
			WHERE boardIdx=#{boardIdx}
		</if>
		<if test="brdctgidx==3">
			UPDATE board SET SUBJECT=#{subject},
			CONTENT=#{content},BrdCtgIDX=#{brdctgidx}
			WHERE boardIdx=#{boardIdx}
		</if>
		<if test="brdctgidx==4">
			UPDATE board SET SUBJECT=#{subject},
			CONTENT=#{content},BrdCtgIDX=#{brdctgidx}
			WHERE boardIdx=#{boardIdx}
		</if>
		<if test="brdctgidx==5">
			UPDATE board SET SUBJECT=#{subject},
			CONTENT=#{content},BrdCtgIDX=#{brdctgidx},EMAIL=#{email}
			WHERE boardIdx=#{boardIdx}
		</if>

	</update>
	<!--게시글안에있는 사진찾기 -->
	<select id="boardGetFileName" resultType="String">
		SELECT newFileName FROM
		photos WHERE boardIdx=#{boardIdx}
	</select>
	<!--사진 수정 -->
	<update id="boardUpdateFile">
		UPDATE photos
		SET PHOTOIDX=photos_seq.NEXTVAL, NEWFILENAME=#{param1}, ORIFILENAME
		=#{param2} WHERE boardIdx=#{param3}
	</update>
	<!--사진삭제(정말로 데이터삭제) -->
	<delete id="boardPhotoDel">
		DELETE FROM photos WHERE boardIdx=#{boardIdx}
	</delete>
	<!-- 게시글 삭제(블라인드처리하기) -->
	<delete id="boardDel">
		UPDATE BOARD SET blind='y' WHERE boardIdx=#{boardIdx}
	</delete>

	<select id="getMyPhotos" resultType="photo">
		SELECT rnum, newFileName 
			FROM (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, newFileName, id FROM photos WHERE id=#{param3}) 
			WHERE rnum BETWEEN #{param1} AND #{param2}
	</select>
	
	<select id="getPhotoMax" resultType="int">
		SELECT COUNT(newFileName) FROM photos WHERE id=#{param1}
	</select>
	<!--댓글가져오기 resultType=commentsDTO파일 어노테이션 -->
	<select id="boardCommentList" resultType="comments">
		SELECT COMMIDX,COMMENTS, REG_DATE, BLIND, BOARDIDX,ID,GPIDX , (SELECT COUNT (recIdx) FROM recommend WHERE commIdx=c.commIdx) AS recCnt
		 FROM comments c WHERE boardIdx =#{param1} AND blind ='n' ORDER BY COMMIDX DESC
	</select>
	<!--댓글 작성하기 -->
	<insert id="boardCommentWrite">
		INSERT INTO comments (COMMIDX,COMMENTS,id,BOARDIDX)
		VALUES (comments_seq.NEXTVAL, #{comment}, #{loginId}, #{boardIdx})
	</insert>
	<!--댓글삭제:블라인드처리 -->
	<update id="boardCommDel">
		UPDATE comments SET blind='y' WHERE commIdx=#{commIdx}
	</update>
	<!-- 게시판 추천 증가 -->
	<update id="boardCntUp">
		UPDATE board SET CNTRECO=CNTRECO+1 WHERE
		boardIdx=#{boardIdx}
	</update>
	<!-- 게시판 추천 취소 -->
	<update id="boardCntDown">
		UPDATE board SET CNTRECO=CNTRECO-1 WHERE
		boardIdx=#{boardIdx}
	</update>

	<!-- 조회수감수용 -->
	<update id="boardbhitDown">
		UPDATE board SET bHit=bHit-1 WHERE
		boardIdx=#{boardIdx}
	</update>
	<!--스크랩하기 중복불가-->
	<insert id="boardScrap">
		insert into scrap
		select SCRAP_SEQ.nextval,${param1},#{param2}
		from dual
		where not exists (select * from scrap where boardIdx=${param1} and id=#{param2})
	</insert>
	<delete id="boardScrapDel">
			DELETE FROM scrap WHERE boardIdx=${param1} and id=#{param2}
	</delete>
	
	<select id="fileList" resultType="com.spring.main.dto.PhotoDTO">
		SELECT * FROM photos WHERE boardIdx=#{param1}
	</select>
	<!--로그인아이디 비교-->
	<select id="boardCommRecChk" resultType="String">
		SELECT id FROM recommend WHERE commIdx=#{param1} AND id=#{param2}
	<!--댓글작성--></select>
	<insert id="boardCommRec">
		INSERT INTO recommend (recIdx,commIdx,id) VALUES (recomend_seq.NEXTVAL,#{param1},#{param2}) 
	</insert>
	<!--댓글추천삭제-->
	<delete id="boardCommDec">
		DELETE  FROM recommend WHERE commIdx=#{param1} AND id=#{param2}
	</delete>
	<!--내가추천한댓글 -->
	<select id="myRecList" resultType="board">
		 SELECT commIdx FROM recommend WHERE id=#{param1} AND commidx is not null
	</select>
	<!--대댓글작성 -->
	<insert id="boardRecommWrite">
		INSERT INTO comments_2nd (com2ndIdx, COMMENTS, id, commIdx) 
		VALUES (comments_2nd_seq.NEXTVAL, #{comments}, #{loginId}, #{commIdx})
	</insert>
	
	<select id="myInteriorSlider" resultType="photo">
	SELECT rnum, newFileName 
			FROM (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, newFileName, id FROM photos WHERE id=#{param1}) 
	</select>
	<!--대댓글 리스트-->
	<select id="boardRecommList" resultType="comments2nd">
		  SELECT s.commIdx, s.com2ndIdx, s.comments, s.reg_date, s.id FROM comments c, comments_2nd s 
		  WHERE  c.commIdx=s.commIdx(+) AND c.commIdx=#{param1} AND s.blind='n' ORDER BY s.com2ndIdx DESC 
	</select>
	<!--대댓글삭제-->
	<update id="boardRecommDel">
		 UPDATE comments_2nd SET blind='y' WHERE com2ndIdx=#{com2ndIdx}
	</update>
	<!-- 게시물 신고 -->
	 <insert id="boardRepBoard">
		INSERT INTO reports (repIdx,id,targetId,boardIdx,repCtgIdx) VALUES (reports_seq.NEXTVAL,#{id},#{targetId},#{boardIdx},#{repCtgIdx})
	</insert> 
	<!-- 댓글신고 이동 -->
	<select id="boardCommForm" resultType="comments">
		SELECT commIdx, comments, reg_date, blind, id, boardIdx FROM comments WHERE commIdx=#{commIdx}
	</select>
	<!--댓글 신고처리  -->
	<insert id="boardRepComm">
		INSERT INTO  reports (repIdx,id,targetId,commIdx,repCtgIdx) VALUES (reports_seq.NEXTVAL,#{id},#{targetId},#{commIdx},#{repCtgIdx})
	</insert>
	<!-- 대댓글 신고이동 -->
	<select id="boardRecommForm" resultType="comments2nd">
		SELECT com2ndIdx, comments, reg_date, blind, id FROM comments_2nd WHERE com2ndIdx=#{commIdx}
	</select>
	<!--대댓글 신고처리-->
	<insert id="boardRepRecomm">
		INSERT INTO  reports (repIdx,id,targetId,com2ndIdx,repCtgIdx) VALUES (reports_seq.NEXTVAL,#{id},#{targetId},#{com2ndIdx},#{repCtgIdx})
	</insert>
	
	<!--대댓글 아이디체크-->
	<select id="boardReCommRecChk" resultType="String">
		SELECT id FROM recommend WHERE com2ndIdx=#{param1} AND id=#{param2}
	<!--대댓글작성--></select>
	<insert id="boardReCommRec">
		INSERT INTO recommend (recIdx,com2ndIdx,id) VALUES (recomend_seq.NEXTVAL,#{param1},#{param2}) 
	</insert>
	<!--대댓글추천삭제-->
	<delete id="boardReCommDec">
		DELETE  FROM recommend WHERE com2ndIdx=#{param1} AND id=#{param2}
	</delete>
	<!--대댓글 cnt 증가 -->
	<update id="boardReCommcntUp">
		UPDATE comments_2nd SET cnt=cnt+1 WHERE
		com2ndIdx=#{com2ndIdx}
	</update>
	<!-- 대댓글 cnt 감소 -->
	<update id="boardReCommcntDown">
		UPDATE comments_2nd SET cnt=cnt-1 WHERE
		com2ndIdx=#{com2ndIdx}
		</update>
		<!--댓글 cnt 증가 -->
	<update id="boardCommRecUp">
		UPDATE comments SET cnt=cnt+1 WHERE
		commIdx=#{commIdx}
	</update>
	<!-- 댓글 cnt 감소 -->
	<update id="boardCommcntDown">
		UPDATE comments SET cnt=cnt-1 WHERE
		commIdx=#{commIdx}
		</update>
	<!--게시글추천 아이디체크-->
	<select id="boardRecChk" resultType="String">
		SELECT id FROM recommend WHERE boardIdx=#{param1} AND id=#{param2}
	</select>
	<!--게시글추천하기-->
	<insert id="boardRec">
		INSERT INTO recommend (recIdx,boardIdx,id) VALUES (recomend_seq.NEXTVAL,#{param1},#{param2}) 
	</insert>
	<!--게시글추천삭제-->
	<delete id="boardDec">
		DELETE  FROM recommend WHERE boardIdx=#{param1} AND id=#{param2}
	</delete>
</mapper>